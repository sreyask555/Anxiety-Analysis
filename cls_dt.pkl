import pandas as pd
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, accuracy_score, f1_score
import joblib
import os

if not os.path.exists("models"):
    os.makedirs("models")

df = pd.read_csv("preprocessed_data/final_scaled_dataset.csv")
X = df.drop(columns=["Severity of Anxiety Attack (1-10)"])
y = df["Severity of Anxiety Attack (1-10)"] - 1  # Zero-indexed

X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.05, stratify=y, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=(5/95), stratify=y_train_val, random_state=42)

dt = DecisionTreeClassifier(random_state=42)
param_dist_dt = {
    'max_depth': [3, 6, 10, 15],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'criterion': ['gini', 'entropy']}

random_search_dt = RandomizedSearchCV(dt, param_distributions=param_dist_dt, n_iter=20, cv=3, scoring='f1_macro', verbose=2, n_jobs=-1, random_state=42)
random_search_dt.fit(X_train, y_train)
best_dt = random_search_dt.best_estimator_

def evaluate(name, model, X, y):
    pred = model.predict(X)
    print(f"\n{name}")
    print("Accuracy:", accuracy_score(y, pred))
    print("F1 Score (macro):", f1_score(y, pred, average="macro"))
    print("Classification Report:\n", classification_report(y, pred))

evaluate("Train - Decision Tree", best_dt, X_train, y_train)
evaluate("Validation - Decision Tree", best_dt, X_val, y_val)
evaluate("Test - Decision Tree", best_dt, X_test, y_test)

joblib.dump(best_dt, "models/dt_classifier_model.pkl")
print("Decision Tree Classifier saved.")
print(f"Best estimator is: {best_dt}")