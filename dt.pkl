import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv("preprocessed_data/final_scaled_dataset.csv")

X = df.drop(columns=["Severity of Anxiety Attack (1-10)"])
y = df["Severity of Anxiety Attack (1-10)"]

X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.05, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=1/19, random_state=42)

dt = DecisionTreeRegressor(random_state=42)
param_dist = {
    'max_depth': [None, 5, 10, 20, 30],
    'min_samples_split': [2, 5, 10, 15],
    'min_samples_leaf': [1, 2, 4, 10],
    'max_features': ['auto', 'sqrt', 'log2', None]}

random_search = RandomizedSearchCV(estimator=dt, param_distributions=param_dist,
                                   n_iter=10, cv=3, random_state=42, n_jobs=-1)
random_search.fit(X_train, y_train)

best_dt = random_search.best_estimator_

def evaluate(name, X_set, y_set):
    preds = best_dt.predict(X_set)
    mse = mean_squared_error(y_set, preds)
    r2 = r2_score(y_set, preds)
    print(f"{name} Evaluation:")
    print(f"  MSE: {mse:.3f}")
    print(f"  RÂ²: {r2:.3f}\n")

evaluate("Training", X_train, y_train)
evaluate("Validation", X_val, y_val)
evaluate("Test", X_test, y_test)

print(f"Best Parameters Found:\n{best_dt}")
